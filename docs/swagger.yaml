openapi: "3.0.2"
info:
  title: "API de Exemplo Flask"
  description: "Documentacao centralizada em docs/swagger.yaml"
  version: "1.0.0"
servers:
  - url: "http://127.0.0.1:5000"
    description: "Servidor de desenvolvimento"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Informe o token no formato: Bearer <token>"
  schemas:
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    Usuario:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        is_admin:
          type: boolean
    UsuarioCreate:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        is_admin:
          type: boolean
    UsuarioUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        is_admin:
          type: boolean
security:
  - bearerAuth: []
paths:
  /login/:
    post:
      tags: ["Autenticacao"]
      summary: "Realiza o login do usuario"
      description: "Autentica o usuario e retorna um token de acesso."
      requestBody:
        description: "Credenciais do usuario"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        '200':
          description: "Login realizado com sucesso"
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
        '400':
          description: "Dados invalidos"
        '401':
          description: "Email ou senha incorretos"
  /users/:
    get:
      tags: ["Usuarios"]
      summary: "Lista todos os usuarios"
      description: "Retorna uma lista de todos os usuarios. Requer token de admin."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Lista de usuarios"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Usuario"
        '403':
          description: "Acesso proibido"
    post:
      tags: ["Usuarios"]
      summary: "Cria um novo usuario"
      description: "Cria um novo usuario. Requer token de admin."
      security:
        - bearerAuth: []
      requestBody:
        description: "Objeto de usuario a ser criado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsuarioCreate"
      responses:
        '201':
          description: "Usuario criado com sucesso"
        '400':
          description: "Entrada invalida"
        '403':
          description: "Acesso proibido"
  /users/{user_id}:
    get:
      tags: ["Usuarios"]
      summary: "Retorna um usuario por ID"
      description: "Retorna os dados de um usuario. Requer token de admin ou o proprio usuario."
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: "ID do usuario"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Usuario encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        '403':
          description: "Acesso proibido"
        '404':
          description: "Usuario nao encontrado"
    put:
      tags: ["Usuarios"]
      summary: "Atualiza um usuario"
      description: "Atualiza os dados de um usuario. Requer token de admin ou o proprio usuario."
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: "ID do usuario a ser atualizado"
          required: true
          schema:
            type: integer
      requestBody:
        description: "Objeto com os dados atualizados do usuario"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsuarioUpdate"
      responses:
        '200':
          description: "Usuario atualizado com sucesso"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usuario"
        '400':
          description: "Entrada invalida"
        '403':
          description: "Acesso proibido"
        '404':
          description: "Usuario nao encontrado"
    delete:
      tags: ["Usuarios"]
      summary: "Deleta um usuario"
      description: "Deleta um usuario. Somente admin pode deletar; administradores nao podem se auto-deletar ou deletar outros administradores."
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: path
          description: "ID do usuario a ser deletado"
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Usuario deletado com sucesso"
        '403':
          description: "Acesso proibido"
        '404':
          description: "Usuario nao encontrado"
